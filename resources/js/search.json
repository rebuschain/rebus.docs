[[{"i":"#","p":["Rebus - Taking DeFi Mainstream"]},{"l":"Introduction"},{"i":"what-is-rebus","l":"What is Rebus?","p":["Rebus is a platform built to host blockchain applications (EVM) and native Vaults usable across multiple sovereign networks."]},{"i":"why-rebus","l":"Why Rebus?","p":["Rebus is a sovereign public blockchain in the Cosmos ecosystem, aiming to provide an environment for the deployment of interoperable smart contracts. The network serves as a decentralized, permissionless & censorship resistant avenue for developers to efficiently and securely launch smart contracts using standard framworks."]},{"i":"inter-blockchain-communication-ibc-and-interchain-account-ica","l":"Inter Blockchain Communication (IBC) and Interchain Account (ICA)","p":["At the heart of the Cosmos ecosystem is the Inter Blockchain Communication Protocol (IBC) and then the Interchain Account (ICA), which sets the table for an interoperable base layer 0 to now be used to transfer data packets across thousands of independent networks supporting IBC/ICA. This enables Rebus smart contracts and Rebus Vaults to interoperate with all IBC enabled networks."]},{"l":"Cosmos SDK","p":["The Rebus blockchain is built using the Cosmos SDK framework. A generalized framework that simplifies the process of building secure blockchain applications on top of Tendermint BFT. It is based on two major principles: Modularity & capabilities-based security."]},{"l":"Tendermint","p":["Agreement on the network is reached via Tendermint BFT consensus.","Tendermint BFT is a solution that packages the networking and consensus layers of a blockchain into a generic engine, allowing developers to focus on application development as opposed to the complex underlying protocol. As a result, Tendermint saves hundreds of hours of development time."]},{"l":"EVM","p":["Rebus is built on top of Ethermint and bring with it the EVM/Ethereum compatibility."]}],[{"i":"native-asset-rebus","l":"Native Asset (REBUS)","p":["REBUS, the native coin of the Rebus chain which carries a variety of use cases within the ecosystem, including:","securing the proof of stake network,","on-chain governance, for the Community fund pool and the Ethical fund pool.","used to pay for all the transactions, services and fees from all the dapps hosted on the Rebus chain."]},{"i":"token-economics-tokenomics","l":"Token Economics (Tokenomics)","p":["Please refer to our website Token economics."]}],[{"l":"Rebus block reward distribution"},{"l":"Rebus block reward schedule","p":["1","10","10.00%","100.00%","11","12","12,714,161","13","14","15","15.00%","158,927,009","2","2.00%","25.00%","3","31,785,402","4","5","5.00%","6","63,570,803","635,708,034","7","8","9","95,356,205","Coins block reward","Coins Released","Percentage","The coins reserved for the block reward are: 635,708,034 . The coins are released with a decreasing inflation for the next 15 years after the genesis:","Year"]},{"i":"the-block-reward-is-distributed-following-these-rules","l":"The block reward is distributed following these rules:","p":["POS Validator/delegators: 72%","Ethical: 8%","Community: 5%","Rebus treasury: 11%","Rebus liquidity program: 4%"]}],[{"i":"#","p":["Rebus Supply API documentation"]},{"i":"supply-api---data","l":"Supply API - Data","p":["The following API endpoints provide information about REBUS current circulating supply as well as the total available supply:","Circulating Supply( https://api.rebustestnet.com:1317/cosmos/bank/v1beta1/supply)","Total Supply( https://api.rebustestnet.com:1317/cosmos/bank/v1beta1/supply)","Max Supply( https://https://api.rebustestnet.com:1317/cosmos/bank/v1beta1/supplyy)"]}],[{"i":"#","p":["Interacting with the Rebus Application"]},{"l":"Rebus UI Application","p":["The Rebus UI Application is available for testnet and mainnet.","The application will allow the user to interact with different parts of the Rebus Chain. The functionality is explained in detail for each of the sections:"]},{"l":"Staking Tutorials","p":["Staking Overview","How to Stake Rebus"]},{"l":"Assets Tutorials","p":["Assets Overview"]},{"l":"Airdrop Tutorials","p":["Airdrop Overview"]},{"l":"Voting Tutorials","p":["Voting Overview"]},{"l":"Tools Tutorials","p":["Rebus Tools"]}],[{"i":"#","p":["Rebus tools"]},{"l":"Rebus tools","p":["\uD83D\uDEE0 Under Construction \uD83C\uDFD7​"]}],[{"i":"#","p":["Securing the Rebus Chain by staking REBUS\uD83D\uDD12 \uD83D\uDD11"]},{"l":"Staking","p":["Staking is the process of locking up a digital asset non custodially (REBUS in the case of the Rebus Chain) to provide economic security to a public blockchain.","⚪️ Secure the network - With REBUS, you have the power to contribute to the security and governance of the Rebus Chain through staking and voting on governance proposals.","⚪️ Earn rewards - By staking to a validator, you are contributing to the security of the network and are rewarded with REBUS through staking rewards.","⚪️ Vote for the Community and Ethical projects - Staking REBUS grants the wallet owner the right to vote on governance proposals for the Community fund pool and the Ethical fund pool."]},{"i":"staking-rewards","l":"✅ Staking rewards","p":["When the staking (delegation) transaction is complete, rewards will start to be generated immediately on a block per block basis. At any time, stakers can claim their accumulated rewards, via their supported wallet.","Where do rewards come from?","Staking rewards are distributed to staked REBUS in two ways:","Transaction fees- transaction fees collected on the Rebus Chain are distributed to staked REBUS.","Newly distributed REBUS - New REBUS created through the network inflation is distributed to REBUS stakers with each subsequent block over the first 15 years of Rebus Chains operation.","Learn more about the reward Schedule: Block reard schedule"]},{"i":"️-staking-safely","l":"⚪️ Staking safely","p":["Staking REBUS is not risk-free. If a validator has downtime or underperforms, a percentage of REBUS delegated to them may be forfeited. This process is termed \"slashing\". To mitigate potential slashing risks to stakers, we have provided a guideline to assist delegators in selecting a validator with a low risk of slashing."]},{"l":"Selecting a Validator","p":["There are many validator candidates to select from when it comes to delegating your REBUS token. The following discussion aims to provide you with some points for consideration when selecting a validator for staking your REBUS. It is important that you do a little research before delegating your REBUS to a validator.","Some points to consider when selecting a validator:","Decentralization of the network","Reputation of the validator","Reachability of the validator","The validator setup","Project and Community involvement","Value added by the validator","Commission taken by the validator","Slashing history and validator uptime"]},{"l":"Decentralization of the network","p":["There are a limited number of validators in the active set for the network. Each validator will vote on consensus for each proposed block. The more tokens a validator has staked to them increases the power of the validators vote. It is therefore important that no one validator gains too much voting power over the network, to avoid centralization. To help with decentralization of voting power, you may consider delegating to validators lower on the list of total delegation."]},{"l":"Reputation of the validator","p":["Each validator is responsible to provide as much information as possible to potential delegators.","You may want to investigate validators you are planning on delegating to. Most validators will provide some extra information such as a bio and website that will be available by clicking on the validator's name in the https://mintscan.io/rebus blockchain explorer interface.","Some validators run Telegram, Discord, or Twitter channels where you can directly contact the operators and receive updates so that you are informed about the validators operations and maintenance activities.","Many validator operators have representation in the official Rebus Discord and Telegrams channels.","You may want to ask about particular validators in the Rebus Discord channels and/or Telegram chat."]},{"l":"Reachability of the validator","p":["Apart from some validators running a telegram, discord etc. consider how reachable a validator is. For instance, when you want to know certain specifics mentioned in this chapter or an active governance proposal, his or her validator setup (hardware used or security measures taken etc.). Try getting in touch with the validators you like to stake to."]},{"l":"The Validator setup","p":["When you delegate to a validator nobody wants that validator to be compromised in some way in order to prevent any form of slashing. A validator can take many precautions to mitigate this. For example: they can make a difference by upholding good hardware standards for their validator, implementing a sentry, setting up good monitoring and alerting infrastructure and making sure they have appropriate security configuration."]},{"l":"Project and Community involvement","p":["Anyone can become a validator if technically capable. A difference apart from the technical aspects can be made by their involvement in the project and the community. Some are actively trying to help the community in many different ways. Helping the community will help provide an excellent end user experience to Rebus network users and will in turn help the Rebus network grow. Ultimatelly, this help drive adoption of the Rebus network.","Validators that are involved with the project means that they are up-to-date on the progress of the project, what is happening and how they can use that knowledge to help educate the community and the rest of the world.","Active validators are also more likely to be well informed of network upgrades. If validators were to miss software upgrades, they would be unable to reach consensus with the rest of the network. It is most likely that the validator would end up being jailed and thus slashed for downtime."]},{"l":"Value added by the validator","p":["Some validators are able to add value for delegators in various ways. This information should be available on the validators websites."]},{"l":"Commission taken by the validator","p":["Validator commission is a percentage of the REBUS rewards earned that is provided to the validator in return for their service. Validators have ongoing costs for running their validator service and it is fair that they are compensated for their time, resources and knowledge that they commit to running their validators. In addition, some validator operators commit a significant amount of their time and resources to assisting the community through the various social platforms.","Each validator has the freedom to set their own commission rates. Validators have the power to alter their commission rates as they desire within the range each validator sets when they create their validator.","When considering the amount of commission you are willing to pay, you may consider that some validators will provide the bare minimum infrastructure to run a validator while others will run enterprise grade hardware and security which comes with higher operating costs. Sometimes a higher commission rate may represent the higher costs for some operators to provide a higher level of service. However, this may not always be the case."]},{"l":"Slashing history and validator uptime","p":["Each validator must strive to provide the highest uptime possible. From time to time, a validator may be jailed for too much downtime or double signing a block. If a validator is jailed, they and their delegators are penalized by losing a portion of their staked tokens (known as \"slashing\").","You will be able to see a validators jail history by browsing their transaction history in the block explorer. Look out for \"unjail\" transactions.","Under certain circumstances, a validator may be permanently jailed (aka \"tombstoned\". This means they can never release themselves from jail and will no longer receive block rewards or be able to vote."]},{"l":"Staking Tutorials","p":["The following tutorials aim to provide step by instructions to stake your REBUS to a validator of your choice.","How to stake Rebus"]},{"l":"Command Line Reference","p":["Staking"]}],[{"i":"#","p":["How to stake your Rebus with the Omniflix UI and Keplr browser extension"]},{"l":"Rebus Staking UI"},{"l":"Overview","p":["In this tutorial we will learn how to stake Rebus to a validator of the Rebus network. This will earn you rewards and help to secure the Rebus network. We will be achieving this with the following general steps:","Install and configure the Keplr browser extension","Open the Rebus staking UI and login with your Keplr wallet","Select a validator and stake your Rebus tokens","Redelegate Tokens","Undelegate Tokens","Collect staking rewards","For users with a Rebus stakedrop allocation, you will need to add your rebus wallet associated with the stakedrop to your Keplr browser extension. You can do this by following the Keplr guide and entering the mnemonic associated with your cosmos (atom) wallet address.","Delegation of your tokens to a validator will make them unusable for any other purpose. The tokens become \"bonded\". To \"unbond\" your tokens, you will need to un-delegate them. #TODO veifty that this process takes 14 days. During this unbonding time you will NOT receive rewards."]},{"l":"Open the Rebus Staking UI and log in with Keplr browser extension","p":["Open the Chrome browser and navigate to the Rebus webapp (TBA). You will see the following page:","Be sure that you have the wallet you wish to use selected by clicking the Keplr icon in your Chrome toolbar, selecting the silhouette in the top right of the Keplr window and then selecting the account you wish to use.","Click the Connect Wallet to continue. A popup window will appear requesting to connect rebus.omniflix.co to your Keplr wallet.","Click Approve to continue."]},{"l":"Select a validator and stake your Rebus tokens","p":["To see all the available validators, click the All Validators tab if it's not already selected. A list of active validators will be shown. To see more validators you can click the pagination arrows at the bottom of the page. To delegate tokens to your desired validator, click the DELEGATE button to the right hand side of the row for the validator you wish to delegate too. You can also delegate from the My Token header section of the page.","A form will appear, showing the validator and a field to enter the amount of tokens to delegate. Your available tokens can be seen at the bottom of the form. Enter the amount of tokens you wish to delegate and click DELEGATE.","A Keplr wallet popup will appear asking for approval for the transaction. Click Approve to finalize the delegation.","After the transaction is completed, a popup will indicate that the tokens were successfully delegated. Click DONE to continue.","Your tokens are now delegated to the selected validator. You can now see the delegated amount next to the validator in the validator list. You will also be given additional options to REDELEGATE and UNDELEGATE for this validator."]},{"l":"Redelegate tokens","p":["If you want to move your tokens to a different validator you can use the redelegate buttons. Once you click on them a popup will show up asking you the from and to validator and the amount you would like to redelegate.","Click on the Redelegate button and approve the transaction in Keplr as you did before. At this point a popup will appear with indicating that the redelegation succeeded.","After redelegating your tokens you should now see two validator listed."]},{"l":"Undelegate tokens","p":["If you want to remove your tokens from a validator you can use the undelegate buttons. Once you click on them a popup will show up asking you which validator and the amount you would like to undelegate.","Click on the Undelegate button and approve the transaction in Keplr as you did before. At this point a popup will appear with indicating that the undelegation succeeded.","After undelegating your tokens you should now see one validator listed."]},{"l":"Collect staking rewards","p":["Work in progress...."]}],[{"i":"#","p":["How to install and configure crypto wallets that are compatible with Rebus"]},{"l":"Wallets"},{"l":"Wallet Tutorials","p":["Wallets"]},{"l":"Command Line Reference","p":["Wallets"]}],[{"i":"#","p":["In this tutorial we will explore the steps required to install and configure the Keplr browser extension."]},{"l":"Keplr Browser Extension"},{"l":"Before we Start","p":["Please note the following important announcements:","Keplr extension is only officially supported by the Google Chrome browser.","There is a Brave extension available but may lack some features of the Chrome version. There is no official Keplr extension for Firefox. Be aware of scammers.","Please be aware that you must never provide your \"mnemonic\" (aka \"private key\" or \"seed phrase\") to anyone, EVER. No individual from the Rebus team will EVER request you provide provide this and it is not required for any technical support purpose whatsoever.","This tutorial assumes you are using the Chrome browser."]},{"l":"Install Keplr Browser Extension","p":["Follow this link to the official Keplr browser extension on the chrome web store and click on the Add to Chrome button.","2. A dialogue window will appear requesting permission to add \"Keplr\". Click the Add extension button.","3. By default, the extension icon will be nested under the extensions icon on the toolbar in the top right of the browser. Click the extensions icon and then click the pin icon to make Keplr visible in the toolbar.","4. The Keplr extension can now be interacted with by clicking on the Keplr icon."]},{"l":"Add Accounts","p":["There are two ways to initiate adding an account to Keplr extension. The first method is used if you have not already added any accounts to Keplr. The second method is used when you are adding additional accounts to Keplr.","Method 1 (no existing accounts)","Click the Keplr extension icon. A new browser tab will appear.","Method 2 (existing account already added)","Click the Keplr extension icon. After the Keplr wallet window opens, click the silhouette in the top right hand corner.","Another window will appear with a list of accounts. Click + Add Account to add or create a new account.","You now have 3 options to add and import accounts to the Keplr extension:","Create a new account,","Import an existing account, or","Import ledger.","For people who have stakedrop( http://stakedrop.rebuschain.com to confirm):","If you do not already have the account associated with your stakedrop loaded into your Keplr wallet, please proceed to Import existing account and use the \"Mnemonic Seed\" associated with your Cosmos (ATOM) account that is eligible for the stakedrop. Or, if your Cosmos account was secured by a ledger hardware wallet, please proceed to Import ledger."]},{"l":"Create new account","p":["After clicking on the Create new account button you will be presented with form with a field for you to enter your \"mnemonic seed\" as well as fields for your \"Account name\", \"New Password\" and \"Confirm password\".","Before continuing: Write down your \"Mnemonic Seed\" on a piece of paper. Store these words in a secure place and NEVER provide them to anyone. This phrase is the only way to recover your account if you lose access to the Keplr extension and it is the ONLY way to migrate you account to another wallet. Anyone who has this Mnemonic Seed can access and withdraw your crypto tokens.","DO NOT: Take screenshots or store these words digitally.","2. Enter your chosen account name and password for the account, and then click the Next button.","3. You will be prompted to enter your mnemonic seed by clicking the words in the correct order from the previous screen. Select the words in order and click the Register button when it is unlocked by successfully selecting the words in order.","4. The following screen will let you know \"You're all set!\". Click the Done button to finish.","5. Your account is now accessible by clicking on the Keplr extension icon in the toolbar."]},{"l":"Import an existing account","p":["After clicking on the Import existing account button, you will be presented with a form where you can \"Input your seed\" as well as fields for your \"Account name\", \"New Password\" and \"Confirm password\". Enter your seed phrase (mnemonic seed), choose an account name for the wallet and create a new password. Click the Next button when done.","2. The following screen will let you know \"You're all set!\". Click the Done button to finish.","3. Your account is now accessible by clicking on the Keplr extension icon in the toolbar."]},{"l":"Import ledger","p":["The following ledger tutorial assumes that you have followed the setup instructions for your ledger device and have installed the cosmos app on your ledger device. If you have not already completed this setup, please see:","Setting up ledger device","Installing apps on a ledger device","Now that your ledger device has been setup, we can continue with the tutorial.","Connect your ledger device to your computer via a USB cable.","Enter your pin number into the ledger device to log in.","Open the cosmos app on your ledger device.","Now click Import ledger, you will be presented with a form with fields for your \"Account name\", \"New Password\" and \"Confirm password\".","5. Enter your chosen account name as well as a password. Click Next to continue.","If this is the first time you have used a ledger with the browser, you may be presented with the following popup. Follow the steps in the popup and click Next to continue.","You will be presented with another popup window. Select the desired device from the list and click Connect to continue.","6. The following screen will let you know \"You're all set!\". Click the Done button to finish.","7. Your account is now accessible by clicking on the Keplr extension icon in the toolbar."]},{"l":"Switching Between Accounts","p":["If you have multiple accounts attached to your Keplr browser extension, you may need to switch between them from time to time.","To change accounts:","Click the Keplr extension icon, then click the silhouette in the top right hand corner.","2. A window will be shown with all of you accounts attached to Keplr. You can choose your desired account by clicking on it."]}],[{"i":"#","p":["How to use MetaMask with Rebus"]},{"l":"Metamask Browser Extension","p":["\uD83D\uDEE0 Under Construction \uD83C\uDFD7​"]}],[{"i":"#","p":["How to install and configure crypto wallets that are compatible with Rebus"]},{"l":"Wallets Troubleshooting","p":["This section is to help users that might have issues setting up their wallet to connect to the Rebus chain."]},{"i":"wax-users-also-users-not-seeing-their-balance-on-keplr","l":"WAX users (also users not seeing their balance on Keplr)","p":["WAX users had initially set up their Keplr wallet using the WAX airdrop page. That was a temporary page to get the rebus mainnet address. In order to receive your token you need to follow the steps below"]},{"l":"Remove Rebus chain from Keplr","p":["Go to your Keplr wallet and select a different blockchain. Then in the blockchain dropdown go to the Rebus chain and click on the x to the right of the name","Click Yes on the prompt","After that click on the connect wallet button and approve the experimental features:","At this point you should be all set with the latest version of the Rebus chain. Select the Rebus chain and verify your amount. If you are a WAX users you should also see one LUDUS Token assigned to your wallet.","If after following the steps above you still have issues please fill out the form here."]},{"l":"Which wallet should I use","p":["When you click on the connect wallet button you will get the following popup.","If you are an ATOM, OSMOS or WAX user select the first wallet Keplr Wallet or if you were using Cosmostation for staking select that one.","If you are an EVMOS Keplr user select the second button Keplr Wallet (EVMOS)","If you are a Evmos Metamask user please select the third Metamask button."]},{"l":"Metamask is not adding the network","p":["If the connect wallet with Metamask doesn't work do the following:","Open your metamask wallet and click Add Network","Fill out the following info:","Nework name: Rebus","New RPC URL: https://api.rebuschain.com:8545","Chain id: 1111","Currency Symbol: REBUS","At this point you wallet should show the Rebus chain"]}],[{"i":"#","p":["Rebus Airdrop for Evmos, Osmosis, Atom and WAX"]},{"l":"Airdrop","p":["\uD83D\uDEE0 Under Construction \uD83C\uDFD7​"]}],[{"i":"#","p":["Assets on Rebus"]},{"l":"Rebus Assets Management","p":["\uD83D\uDEE0 Under Construction \uD83C\uDFD7​"]}],[{"i":"#","p":["Voting on Rebus"]},{"l":"Voting on Rebus","p":["\uD83D\uDEE0 Under Construction \uD83C\uDFD7​"]}],[{"i":"#","p":["A general introduction Rebus cli along with a brief description of commands and flags"]},{"l":"Introduction"},{"i":"introduction-1","l":"Introduction","p":["rebusd is a command line client for the Rebus network. Rebus users can use rebusd to send transactions to the Rebus network and query the blockchain data.","See here for instructions on installing rebusd."]},{"l":"Working Directory","p":["The default working directory for the rebusd is $HOME/.rebusd, which is mainly used to store configuration files and blockchain data. The Rebus key data is saved in the working directory of rebusd. You can also specify the rebusd working directory by using the --home flag when executing rebusd."]},{"l":"Connecting to a Full-Node","p":["By default, rebusd uses tcp://localhost:26657 as the RPC address to connect to the Rebus network. This default configuration assumes that the machine executing rebusd is running as a full-node.","The RPC address can be specified to connect to any full-node with an exposed RPC port by adding the --node flag when executing rebusd"]},{"l":"Global Flags"},{"l":"GET Commands","p":["--chain-id","--home","--log_format","--trace","$HOME/.rebus","All GET commands have the following global flags:","Default Value","Description","Directory for config and data","Logging format (json | plain)","Name, shorthand","plain","Print out full stack trace on errors","Required","string","The network Chain ID","type"]},{"l":"POST Commands","p":["--account-number","--broadcast-mode","--chain-id","--dry-run","--fees","--from","--gas","--gas-adjustment","--gas-prices","--generate-only","--help, -h","--home","--keyring-backend","--ledger","--memo","--node","--offline","--sequence","--sign-mode","--trace","--trust-node","--yes","<host>:<port> to tendermint rpc interface for this chain","$HOME/.rebus","0","1","200000","AccountNumber to sign the tx","Adjustment factor to be multiplied against the estimate returned by the tx simulation; if the gas limit is set","All POST commands have the following global flags:","bool","Build an unsigned transaction and write it to STDOUT","Choose sign mode (direct | amino-json), this is an advanced feature","Default","Description","Directory for config and data","Don't verify proofs for responses","false","Fees to pay along with transaction","float","Gas limit to set per-transaction; set to \"simulate\" to calculate required gas automatically","Gas prices in decimal format to determine the transaction fee","Ignore the --gas flag and perform a simulation of a transaction, but don't broadcast it","int","Memo to send along with transaction","Name of private key with which to sign","Name, shorthand","Offline mode (does not allow any online functionality)","os","Print help message","Print out full stack trace on errors","Required","Select keyring's backend","Sequence number to sign the tx","Skip tx broadcasting prompt confirmation","string","sync","tcp://localhost:26657","The network Chain ID","Transaction broadcasting mode (sync | async | block)","true","type","Use a connected Ledger device"]},{"l":"Module Commands","p":["bank","Bank subcommands for querying accounts and sending coins etc.","debug","Debug subcommands","Description","distribution","Distribution subcommands for rewards management","gov","Governance and voting subcommands","keys","Keys allows you to manage your local keystore for tendermint","params","Query parameters of modules","Query remote node for status","slashing","Slashing subcommands","Software Upgrade subcommands","staking","Staking subcommands for validators and delegators","status","Subcommand","tendermint","Tendermint state querying subcommands","tx","Tx subcommands","upgrade"]}],[{"l":"Useful CLI Commands","p":["Check if you are jailed or tombstoned:","Check if your node is catching up:","Convert address from Bench32 to HEX (example):","Convert address from HEX to Bench32 (example):","Export a private key (warning: don't do this unless you know what you're doing!)","Find out what the JSON for a command would be using --generate-only:","Get standard debug info from the rebus daemon:","Get your node ID:","Get your valoper address:","Import a key from a mnemonic (Comsos/Keplr or Keplr+Ledger):","Import a key from a mnemonic (Metamask or Metamask+Ledger):","Query the results of a gov vote that has ended, from a remote RPC (NB - you have to specify a height before the vote ended):","Query the validator set (and jailed status) via CLI:","See keys on the current box:","Set the default chain for commands to use:","Stake:","Withdraw rewards (including validator commission), where rebusvaloper1... is the validator address:","Your peer address will be the result of this plus host and port, i.e. id@host:26656 if you are using the default port."]}],[{"i":"#","p":["CLI reference for rebusd modules"]},{"l":"Module Reference"}],[{"i":"#","p":["bank module allows you to manage assets for accounts loaded into the local keys module"]},{"l":"bank"},{"l":"Available Commands","p":["Name","Description","balances","Query for account balances by address","total","Query the total supply of coins of the chain","send","Create and/or sign and broadcast a MsgSend transaction"]},{"l":"rebusd query bank balances","p":["Query the total balance of an account or of a specific denomination.","Flags:","Name, shorthand","Type","Required","Default","Description","-h, --help","Help for coin-type","--denom","string","The specific balance denomination to query for","--count-total","Count total number of records in all balances to query for"]},{"l":"rebusd query bank total","p":["Query total supply of coins that are held by accounts in the chain.","Flags:","Name, shorthand","Type","Required","Default","Description","-h, --help","Help for coin-type","--denom","string","The specific balance denomination to query for"]},{"l":"rebusd tx bank send","p":["Sending tokens to another address, this command includes generate, sign and broadcast steps.","Flags:","Name, shorthand","Type","Required","Default","Description","-h, --help","Help for balances"]}],[{"i":"#","p":["The debug module is a tool for simple debugging."]},{"l":"debug"},{"l":"Available Commands","p":["Name","Description","addr","Convert an address between hex and bech32","pubkey","Decode a ED25519 pubkey from hex, base64, or bech32","raw-bytes","Convert raw bytes output (eg. [10 21 13 127]) to hex"]},{"l":"rebusd debug addr","p":["Convert rebus address between hex and bech32 format.","TIP","The command will accept either hex or bech32 coded address as the [address] argument. The command will return the same output for either.","Your bech32 encoded rebus local addresses can be queried with rebusd keys list","Example usage:","Returns:"]},{"l":"rebusd debug pubkey","p":["Decode a ED25519 pubkey from hex, base64, or bech32.","TIP","The command will accept hex, base64 or bech32 coded keys as [pubkey] argument. The command will return the same output for any of these inputs.","Your bech32 encoded validator pubkey can be queried with rebusd tendermint show-validator","Example usage:","Returns:"]},{"l":"rebusd debug raw-bytes","p":["Convert raw bytes output (eg. [10 21 13 127]) to hex.","Example command:","Returns:"]}],[{"i":"#","p":["The distribution module allows you to manage your staking rewards"]},{"l":"distribution"},{"l":"Available Commands","p":["commission","community-pool","Description","fund-community-pool","Funds the community pool with the specified amount","Name","params","Query all distribution delegator rewards or rewards from a particular validator","Query distribution outstanding (un-withdrawn) rewards for a validator and all their delegations","Query distribution params","Query distribution validator commission","Query distribution validator slashes.","Query the amount of coins in the community pool","rewards","Set the withdraw address for rewards associated with a delegator address","set-withdraw-addr","slashes","validator-outstanding-rewards","Withdraw all rewards for a single delegator","Withdraw rewards from a given delegation address, and optionally withdraw validator commission if the delegation address given is a validator operator","withdraw-all-rewards","withdraw-rewards"]},{"l":"rebusd query distribution commission","p":["Query validator commission rewards from delegators to that validator."]},{"l":"rebusd query distribution community-pool","p":["Query all coins in the community pool which is under Governance control."]},{"l":"rebusd query distribution params","p":["Query distribution params."]},{"l":"rebusd query distribution rewards","p":["Query all rewards earned by a delegator, optionally restrict to rewards from a single validator."]},{"l":"rebusd query distribution slashes","p":["Query all slashes of a validator for a given block range."]},{"l":"rebusd query distribution validator-outstanding-rewards","p":["Query distribution outstanding (un-withdrawn) rewards for a validator and all their delegations."]},{"l":"rebusd tx distribution fund-community-pool","p":["Funds the community pool with the specified amount."]},{"l":"rebusd tx distribution set-withdraw-addr","p":["Set the withdraw address for rewards associated with a delegator address."]},{"l":"rebusd tx distribution withdraw-all-rewards","p":["Withdraw all rewards for a single delegator."]},{"l":"rebusd tx distribution withdraw-rewards","p":["Withdraw rewards from a given delegation address, and optionally withdraw validator commission if the delegation address given is a validator operator."]}],[{"i":"#","p":["The governance module provides tools for querying, submitting, and voting on proposals"]},{"l":"gov"},{"l":"Available Commands","p":["deposit","Deposit tokens for an active proposal","deposits","Description","Get the tally of a proposal vote","Name","param","params","proposal","proposals","proposer","Query deposits on a proposal","Query details of a deposit","Query details of a single proposal","Query details of a single vote","Query proposals with optional filter","Query the parameters (voting","Query the parameters of the governance process","Query votes on a proposal","Query which address proposed a proposal with a given ID.","Submit a proposal along with an initial deposit","submit-proposal","tally","vote","Vote for an active proposal, options: yes/no/no_with_veto/abstain","votes"]},{"l":"rebusd query gov proposal","p":["--depositor","--limit","--status","--voter","100","Address","Default","Description","Filter proposals by depositor address","Filter proposals by status","Filter proposals by voter address","Flags:","Limit to the latest [number] of proposals. Default to all proposals","Name, shorthand","Query details of a single governance proposal:","Required","string","Type","uint"]},{"l":"rebusd query gov proposals","p":["Query all proposals:","Query proposals with conditions filters:"]},{"l":"rebusd query gov vote","p":["Query details of a single vote."]},{"l":"rebusd query gov votes","p":["Query votes on a proposal."]},{"l":"rebusd query gov deposit","p":["Query details for a single proposal deposit on a proposal by its identifier."]},{"l":"rebusd query gov deposits","p":["Query details for all deposits on a proposal."]},{"l":"rebusd query gov tally","p":["Query tally of votes on a proposal."]},{"l":"rebusd query gov param","p":["Query the parameters (voting | tallying | deposit) of the governance process.","Example:"]},{"l":"rebusd query gov params","p":["Query the all the parameters for the governance process."]},{"l":"rebusd query gov proposer","p":["Query which address proposed a proposal with a given ID."]},{"l":"rebusd tx gov submit-proposal","p":["Submit a proposal along with an initial deposit. Proposal title, description, type and deposit can be given directly or through a proposal JSON file. Available Commands:","Name","Description","cancel-software-upgrade","Cancel the current software upgrade proposal","community-pool-spend","Submit a community pool spend proposal","param-change","Submit a parameter change proposal","software-upgrade","Submit a software upgrade proposal"]},{"l":"rebusd tx gov submit-proposal community-pool-spend","p":["Submit a community pool spend proposal along with an initial deposit. The proposal details must be supplied via a JSON file.","Where proposal.json contains, for example:"]},{"l":"rebusd tx gov submit-proposal param-change","p":["Submit a parameter proposal along with an initial deposit. The proposal details must be supplied via a JSON file. For values that contains objects, only non-empty fields will be updated.","IMPORTANT","Currently parameter changes are evaluated but not validated, so it is very important that any \"value\" change is valid (ie. correct type and within bounds) for its respective parameter, eg. \"MaxValidators\" should be an integer and not a decimal.","Proper vetting of a parameter change proposal should prevent this from happening (no deposits should occur during the governance process), but it should be noted regardless.","Where proposal.json contains, for example:"]},{"l":"rebusd tx gov submit-proposal software-upgrade","p":["--deposit","--description","--info","--time","--title","--upgrade-height","Coin","Default","Deposit of the proposal","Description","Description of proposal","Flags:","int64","Name, shorthand","Optional info for the planned upgrade such as commit hash, etc.","Required","Store an os/architecture -> binary URI map in the upgrade plan info field as JSON under the binaries key, eg:","string","Submit a software upgrade along with an initial deposit. Please specify a unique name and height OR time for the upgrade to take effect.","The height at which the upgrade must happen (not to be used together with --upgrade-time)","The time at which the upgrade must happen (not to be used together with --upgrade-height)","TIP","Title of proposal","To enable nodes managed by forbole/cosmovisor to undertake an automatic upgrade, where the operator has the required environment variable set.","Type","Yes"]},{"l":"rebusd tx gov submit-proposal cancel-software-upgrade","p":["--deposit","--description","--title","Cancel a software upgrade along with an initial deposit.","Coin","Default","Deposit of the proposal","Description","Description of proposal","Flags:","Name, shorthand","Required","string","Title of proposal","Type","Yes"]},{"l":"rebusd tx gov deposit","p":["Submit a deposit for an active proposal. You can find the proposal-id by running rebusd query gov proposals."]},{"l":"rebusd tx gov vote","p":["Submit a vote for an active proposal. You can find the proposal-id by running rebusd query gov proposals. Vote for an active proposal, options: (yes | no | no_with_veto | abstain).","Example vote, voting yes on proposal number 1:"]}],[{"i":"#","p":["The keys module allows you to manage your local tendermint keystore (\"wallets\") for the rebus network."]},{"l":"keys"},{"l":"Available Commands","p":["add","Add an encrypted private key (either newly generated or recovered), encrypt it, and save to disk","Compute the bip39 mnemonic for some input entropy","delete","Delete the given key","Description","export","Export private keys","import","Import private keys into the local keystore","list","List all keys","mnemonic","Name","parse","Parse address from hex to bech32 and vice versa","Retrieve key information by name or address","show"]},{"l":"rebusd keys add","p":["--account","--algo","--coin-type","--dry-run","--hd-path","--index","--interactive","--ledger","--multisig","--multisig-threshold","--no-backup","--nosort","--pubkey","--recover","0","1","118","Account number for HD derivation","Address index number for HD derivation","coin type number for HD derivation","Construct and store a multisig public key","Default","Derive a new private key and encrypt to disk.","Description","Don't print out seed phrase (if others are watching the terminal)","false","Flags:","Interactively prompt user for BIP39 passphrase and mnemonic","K out of N required signatures","Key signing algorithm to generate keys for","Keys passed to --multisig are taken in the order they're supplied","Manual HD Path derivation (overrides BIP44 config)","Name, shorthand","Parse a public key in bech32 format and save it to disk","Perform action, but don't add key to local keystore","Provide seed phrase to recover existing key instead of creating","Required","secp256k","Store a local reference to a private key on a Ledger device"]},{"l":"Create a new key","p":["The following example will create a key in the local keystore named MyKey:","Enter and repeat the password, at least 8 characters, then you will get a new key.","WARNING","write the seed phrase in a safe place! It is the only way to recover your account if you ever forget your password, and/or something happens to your local keystore."]},{"l":"Recover an existing key from seed phrase","p":["If you forget your password or lose your key, or you would like to use your key in another place, you can recover your key by using the --recover flag.","The following example will recover a key with the seed phrase and store it in the local keystore with the name MyKey:","You'll be asked to enter and repeat the new password for your key, and enter the seed phrase. Then you get your key back."]},{"l":"Create a multisig key","p":["The following example creates a multisig key with 3 sub-keys, and specify the minimum number of signatures as 2. The transaction could be broadcast only when the number of signatures is greater than or equal to 2.","TIP","signer-keyname can be the type of \"local/offline/ledger\", but not \"multi\" type.","If you don't have all the permission of sub-keys, you can ask for the pubkey's to create the offline keys first, then you will be able to create the multisig key.","Offline key can be created by rebusd keys add --pubkey.","How to use multisig key to sign and broadcast a transaction, please refer to multisign."]},{"l":"rebusd keys delete","p":["Delete a local key by the given name.","Flags:","Name, shorthand","Default","Description","Required","--force, -f","false","Remove the key unconditionally without asking for the passphrase","--yes, -y","Skip confirmation prompt when deleting offline or ledger key references"]},{"l":"Delete a local key","p":["The following example will delete the key named MyKey from the local keystore:"]},{"l":"rebusd keys export","p":["Export the keystore of a key to stdout:"]},{"l":"Export keystore","p":["The following example will export the key named MyKey to stdout:"]},{"l":"rebusd keys import","p":["Import a ASCII armored private key into the local keybase."]},{"l":"Import a ASCII armored private key","p":["The following example will import the private keys from key-to-import.json and store it in the local keystore with the name MyKey"]},{"l":"rebusd keys list","p":["List all the keys from the local keystore that have been stored by this key manager, along with their associated name, type, address and pubkey.","Flags:","Name, shorthand","Default","Description","Required","--list-name","List names only"]},{"l":"List all keys","p":["The following example will list all keys in the local keystore managed by the rebusd key manager:"]},{"l":"rebusd keys mnemonic","p":["Create a bip39 mnemonic, sometimes called a seed phrase, by reading from the system entropy. To pass your own entropy, use unsafe-entropy mode.","Flags:","Name, shorthand","Default","Description","Required","--unsafe-entropy","Prompt the user to supply their own entropy, instead of relying on the system"]},{"l":"Create a bip39 mnemonic","p":["The following example will create a new bip39 seed phrase:","You'll get a bip39 mnemonic with 24 words, e.g.:"]},{"l":"rebusd keys parse","p":["Convert and print to stdout key addresses and fingerprints from hexadecimal into bech32 rebus prefixed format and vice versa."]},{"l":"Convert and print to stdout key addresses from hex fingerprint","p":["The following example will convert a given hex fingerprint to a range of bep32 human readable address formats:","Returns:","Convert and print to stdout hex fingerprint from bep32 address:"]},{"l":"rebusd keys show","p":["--address","--bech","--device","--multisig-threshold","--pubkey","1","acc","Default","Description","false","Flags:","Get details of a local key.","K out of N required signatures","Name, shorthand","Output the address in a ledger device","Output the address only (overrides --output)","Output the public key only (overrides --output)","Required","The Bech32 prefix encoding for a key (acc/val/cons)"]},{"l":"Get details of a local key","p":["The following example will return the details for the key named MyKey:","The following infos will be shown:"]},{"i":"get-validator-operator-address","l":"#Get validator operator address","p":["If an address has been bonded to be a validator operator (which the address you used to create a validator), then you can use --bech val to get the operator's address prefixed by iva and the pubkey prefixed by ivp:","Example Output:"]}],[{"l":"params","p":["Params module allows you to query the system parameters which can be governed (except the gov params) by the gov module.","Subspace currently supports the following: auth, bank, staking, mint, distribution, slashing, gov, crisis.","Among them, the parameters available for query for each subspace are as follows:"]},{"l":"auth","p":["10","1000","256","590","7","default","description","Gas spent on edd2519 algorithm signature verification","Gas spent on secp256k1 algorithm signature verification","key","Maximum number of characters in the memo field in a transaction","Maximum number of signatures per transaction","MaxMemoCharacters","SigVerifyCostED25519","SigVerifyCostSecp256k1","The amount of gas consumed per byte of the transaction","TxSigLimit","TxSizeCostPerByte"]},{"l":"bank","p":["key","description","default","SendEnabled","Tokens that support transfer","DefaultSendEnabled","Whether to enable the transfer function by default","true"]},{"l":"staking","p":["??","10000","125","7","Bond denom","BondDenom","default","description","HistoricalEntries","key","MaxEntries","Maximum number of validators","MaxValidators","Mortgage redemption time","The maximum number of unbinding/redelegation orders in progress","The number of historical entries","UnbondingTime","urebus"]},{"l":"mint","p":["key","description","default","Inflation","Token issuance frequency","??","MintDenom","Denom of the token mintable","urebus","BlocksPerYear","Blocks produced per year","6311520"]},{"l":"distribution","p":["key","description","default","communitytax","Fees charged for withdrawal","0.02","baseproposerreward","The base reward rate of the block proposer","0.01","bonusproposerreward","Reward rate for block proposers","0.04","withdrawaddrenabled","Whether to support setting the withdrawal address","true"]},{"l":"slashing","p":["???","0.01","0.05","0.5","100","default","description","DowntimeJailDuration","key","Maximum downtime (continuous)","Minimum signature rate in each window","MinSignedPerWindow","Penalty coefficient for double sign","Penalty coefficient for downtime","SignedBlocksWindow","SlashFractionDoubleSign","SlashFractionDowntime","Sliding window for downtime slashing"]},{"l":"gov","p":["key","description","default","depositparams","Related parameters of the deposit mortgage phase","min_deposit: 10000000urebus; max_deposit_period: ??","votingparams","Related parameters of the voting mortgage phase","voting_period: 2d(days)","tallyparams","Related parameters of the voting tally phase","quorum: 0.25; threshold: 0.5; veto_threshold: 0.334"]},{"l":"crisis","p":["key","description","default","ConstantFee","Constant Fee","1000urebus"]}],[{"i":"#","p":["The slashing module can unjail your validator"]},{"l":"slashing"},{"l":"Available Commands","p":["Name","Description","unjail","Unjail validator previously jailed for downtime or double-sign."]},{"l":"rebusd tx slashing unjail","p":["Unjail validator previously jailed for downtime."]},{"l":"Unjail a validator","p":["The following example will unjail a validator using its validator operator (owner) key :","TIP","The validator operator key must be stored in the local keystore."]}],[{"i":"#","p":["The staking module provides a set of subcommands to query the staking state and send staking transactions."]},{"l":"staking"},{"l":"Available Commands","p":["Create new validator initialized with a self-delegation to it","create-validator","delegate","Delegate liquid tokens to an validator","delegation","delegations","delegations-to","Description","Edit existing validator account","edit-validator","historical-info","Name","params","pool","Query a delegation based on address and validator address","Query a redelegation record based on delegator and a source and destination validator address","Query a validator","Query all delegations made from one delegator","Query all delegations to one validator","Query all outgoing redelegatations from a validator","Query all redelegations records for one delegator","Query all unbonding delegatations from a validator","Query all unbonding-delegations records for one delegator","Query an unbonding-delegation record based on delegator and validator address","Query for all validators","Query historical info at given height","Query the current staking parameters information","Query the current staking pool values","redelegate","Redelegate illiquid tokens from one validator to another","redelegation","redelegations","redelegations-from","unbond","Unbond shares from a validator","unbonding-delegation","unbonding-delegations","unbonding-delegations-from","validator","validators"]},{"l":"rebusd query staking validator"},{"l":"Query a validator by validator address","p":["Query information for validator address rebusvaloper...:","Will return something similar to:"]},{"l":"rebusd query staking validators"},{"l":"Query all validators","p":["The following will return information for ALL validators:","The returned values will be similar to those from rebusd query staking validator``"]},{"l":"rebusd query staking delegation","p":["Query a delegation based on delegator address and validator address."]},{"l":"Query a delegation","p":["The following will return delegations for a delegator to a particular validator address rebusvaloper...:","Returns something similar to:"]},{"l":"rebusd query staking delegations","p":["Query all delegations delegated from one delegator."]},{"l":"Query all delegations of a delegator","p":["The following command will return all delegations from a delegators address rebus...:","Will return something similar to:"]},{"l":"rebusd query staking delegations-to","p":["Query all delegations to one validator."]},{"l":"Query all delegations to one validator","p":["The following command will return all delegations to a validator address rebusvaloper...:","Will return something similar to:"]},{"l":"rebusd query staking unbonding-delegation","p":["Query an unbonding-delegation record based on delegator and validator address."]},{"l":"Query an unbonding delegation record"},{"l":"rebusd query staking unbonding-delegations"},{"l":"Query all unbonding delegations records of a delegator"},{"l":"rebusd query staking unbonding-delegations-from"},{"l":"Query all unbonding delegations from a validator"},{"l":"rebusd query staking redelegations-from","p":["Query all outgoing redelegations of a validator"]},{"l":"Query all outgoing redelegatations of a validator"},{"l":"rebusd query staking redelegation","p":["Query a redelegation record based on delegator and source validator address and destination validator address."]},{"l":"Query a redelegation record"},{"l":"rebusd query staking redelegations"},{"l":"Query all redelegations records of a delegator"},{"l":"rebusd query staking pool"},{"l":"Query the current staking pool values","p":["Returns something similar to:"]},{"l":"rebusd query staking params"},{"l":"Query the current staking parameters information","p":["Returns something similar to:"]},{"l":"rebusd query staking historical-info"},{"l":"Query historical info at given height"},{"l":"rebusd tx staking create-validator","p":["--amount","--commission-max-change-rate","--commission-max-rate","--commission-rate","--details","--genesis-format","--identity","--ip","--min-self-delegation","--moniker","--node-id","--pubkey","--security-contact","--website","0.0","Amount of coins to bond","bool","Default","Description","Export the transaction in gen-tx format; it implies --generate-only","false","Flags:","float","Go-Amino encoded hex PubKey of the validator. For Ed25519 the go-amino prepend hex is 1624de6220","Name, shorthand","Node's public IP. It takes effect only when used in combination with","Optional details","Optional identity signature (ex. UPort or Keybase)","Optional website","Required","Send a transaction to apply to be a validator and delegate a certain amount of rebus to it.","string","The initial commission rate percentage","The maximum commission change rate percentage (per day)","The maximum commission rate percentage","The minimum self delegation required on the validator","The node's ID","The validator's (optional) security contact email","type","Validator name","Yes"]},{"l":"Create a validator","p":["TIP","Refer to mainnet instructions for detailed information."]},{"l":"rebusd tx staking edit-validator","p":["--commission-rate","--details","--identity","--min-self-delegation","--moniker","--security-contact","--website","0.0","Commission rate percentage","Default","Description","Edit an existing validator's settings, such as commission rate, name, etc.","Flags:","float","Name, shorthand","Optional details","Optional identity signature (ex. UPort or Keybase)","Optional website","Required","string","The minimum self delegation required on the validator","The validator's (optional) security contact email","type","Validator name"]},{"l":"Edit validator information"},{"l":"rebusd tx staking delegate","p":["Delegate tokens to a validator."]},{"l":"rebusd tx staking unbond","p":["Unbond tokens from a validator."]},{"l":"Unbond some tokens from a validator"},{"l":"rebusd tx staking redelegate","p":["Transfer delegation from one validator to another.","TIP","There is no unbonding time during the redelegation, so you will not miss the rewards. But you can only redelegate once per validator, until a period (= unbonding time) exceed."]},{"l":"Redelegate some tokens to another validator"}],[{"i":"#","p":["A node can be queried for up to date information such as node info, sync info and validator info, specific to that node."]},{"l":"status","p":["Flags:","Name, shorthand","Default","Description","Required","--node, -n","tcp://localhost:26657","< host>:< port> to tendermint rpc interface for this chain","optional"]},{"l":"Query node status","p":["Returns something similar to:"]}],[{"i":"#","p":["The tendermint module allows for querying of validator and node addresses."]},{"l":"tendermint"},{"l":"Available Commands","p":["Name, shorthand","Description","show-address","Shows this node's tendermint validator consensus address","show-node-id","Show this node's ID","show-validator","Show this node's tendermint validator info","version","Print tendermint libraries' version"]},{"l":"rebusd tendermint show-address","p":["The following command will show the tendermint validator address of the local node.","Returns the bech32 encoded validator consensus address rebusvalcon...:"]},{"l":"rebusd tendermint show-node-id","p":["The following command will show the nodes ID","Returns something similar to:"]},{"l":"rebusd tendermint show-validator","p":["The following command will show the validators tendermint consensus pubkey:","Returns something similar to:"]},{"l":"rebusd tendermint version","p":["Returns something similar to:"]}],[{"l":"upgrade"}],[{"l":"Getting started","p":["Development on the Rebus platform is possible using the EVM/Smart contracts and building Web3 applications interacting with the Rebus Vaults.","To get up-and-running, the steps are:","Node setup","Join testnet","To develop and deploy:","Develop and deploy EVM smart contracts here.","Build W3 application using the Rebus Vaults here."]}],[{"l":"Evm smart contracts","p":["\uD83D\uDEE0 Under Construction \uD83C\uDFD7​"]}],[{"l":"ERC-20 tokens","p":["\uD83D\uDEE0 Under Construction \uD83C\uDFD7​"]}],[{"l":"Interacting with the Rebus Vaults","p":["\uD83D\uDEE0 Under Construction \uD83C\uDFD7​"]}],[{"i":"#","p":["Instruction to install the rebusd binary"]},{"l":"Rebusd Installation and setup"},{"l":"Choose an Operating System","p":["The operating system you use for your node is entirely your personal preference. You will be able to compile the rebusd daemon on most modern linux distributions and recent versions of macOS.","For the tutorial, it is assumed that you are using an Ubuntu LTS release.","If you have chosen a different operating system, you will need to modify your commands to suit your operating system."]},{"l":"Install pre-requisites"},{"l":"Install Go","p":["Follow the instructions here to install Go.","For an Ubuntu LTS, you can probably use:","Please install Go v1.17 or later.","Unless you want to configure in a non standard way, then set these in the .profile in the user's home (i.e. ~/) folder.","After updating your ~/.profile you will need to source it:"]},{"l":"Build Rebus from source","p":["The version-tag will need to be set to either a testnet branch or the latest mainnet version tag.","For genesis, the mainnet version tag will be v0.1.0- i.e:","Once you're on the correct tag, you can build:","Build using docker:","To confirm that the installation has succeeded, you can run:","using docker:"]},{"l":"Connecting to the network","p":["To connect to the Rebus network you can either run your own node or connect to a public node's RPC endpoint. To find a public node to connect to consider looking in the Rebus Discord. Connecting to a public node requires the least configuration but you should be sure that you trust whatever node that you choose.","If you choose to run your own node see either Joining Mainet or Joining Testnets depending on what chain you would like to work on."]}],[{"i":"#","p":["For mainnet, it's recommended to use Cosmovisor to run your node. If you've not used it before, then run it during a testnet to check you can get it set up correctly."]},{"l":"Setting up Cosmovisor","p":["Setting up Cosmovisor is relatively straightforward. However, it does expect certain environment variables and folder structure to be set.","Cosmovisor allows you to download binaries ahead of time for chain upgrades, meaning that you can do zero (or close to zero) downtime chain upgrades. It's also useful if your local timezone means that a chain upgrade will fall at a bad time.","Rather than having to do stressful ops tasks late at night, it's always better if you can automate them away, and that's what Cosmovisor tries to do."]},{"l":"Install","p":["First, go and get cosmovisor (recommended approach):","When using cosmovisor, make sure that you do not have auto download of binaries on.","Your installation can be confirmed with:","This will return something like:","Building from source allows you to target a specific version of Cosmovisor, in case you do not want to run 1.0.0 yet.","You can also build from source; cosmovisor is in the main cosmos-sdk repo on Github, so you can use Git tags to target a specific version. This example uses a tag, v0.42.7 that refers to the Cosmos SDK, as Cosmovisor-specific tags did not exist before August 2021. The first of these was cosmovisor/v0.1.0, and the second is the current release, cosmovisor/v1.0.0."]},{"l":"Add environment variables to your shell","p":["In the .profile file, usually located at ~/.profile, add:","Then source your profile to have access to these variables:","You can confirm success like so:","It should return rebusd."]},{"l":"Set up folder structure","p":["Cosmovisor expects a certain folder structure:","Don't worry about current- that is simply a symlink used by Cosmovisor. The other folders will need setting up, but this is easy:"]},{"l":"Set up genesis binary","p":["Cosmovisor needs to know which binary to use at genesis. We put this in $DAEMON_HOME/cosmovisor/genesis/bin.","First, find the location of the binary you want to use:","Then use the path returned to copy it to the directory Cosmovisor expects. Let's assume the previous command returned /home/your-user/go/bin/rebusd:","Once you're done, check the folder structure looks correct using a tool like tree."]},{"l":"Set up service","p":["Commands sent to Cosmovisor are sent to the underlying binary. For example, cosmovisor version is the same as typing rebusd version.","Nevertheless, just as we would manage rebusd using a process manager, we would like to make sure Cosmovisor is automatically restarted if something happens, for example an error or reboot.","First, create the service file:","Change the contents of the below to match your setup - cosmovisor is likely at ~/go/bin/cosmovisor regardless of which installation path you took above, but it's worth checking.","A description of what the environment variables do can be found here. Change them depending on your setup.","Note also that we set buffer size explicitly because of a live bug in Cosmovisor before version v1.0.0. If you are using v1.0.0, you may omit that line.","In addition, the same issue can be fixed by reducing the log via env variable. If you are unsure, ask on Discord."]},{"l":"Start Cosmovisor","p":["If syncing from a snapshot, do not start Cosmovisor yet.","Finally, enable the service and start it.","Check it is running using:","If you need to monitor the service after launch, you can view the logs using:"]}],[{"i":"#","p":["It's \uD83D\uDE80 time!"]},{"l":"Mainnet Setup and Tooling","p":["All of the hard work of the community has paid off, and now it's time to take the network live. Preparing your validator for mainnet involves a few extra considerations. They are detailed below, but a sensible checklist is:","How will you handle chain upgrades?","consider: Cosmovisor","How will you know your node is up?","consider: Monitoring and alerts","How will you mitigate DDOS attacks?","consider: Sentry Nodes","How much storage will you need?","Answering these questions can be daunting, so there is some advice below."]},{"l":"Chain upgrades","p":["In order to streamline chain upgrades and minimise downtime, you may want to set up cosmovisor to manage your node. A guide for this is provided in the Rebus docs."]},{"l":"Backups","p":["Backups of chain state are possible using the commands specified here. If you are using a recent version of Cosmovisor, then the default configuration is that a state backup will be created before upgrades are applied. This can be turned off using environment flags."]},{"l":"Alerting and monitoring","p":["Alerting and monitoring is desirable as well - you are encouraged to explore solutions and find one that works for your setup. Prometheus is available out-of-the box, and there are a variety of open-source tools. Recommended reading:","Alerting:","Tenderduty: https://github.com/blockpane/tenderduty","PANIC: https://github.com/SimplyVC/panic_cosmos","Monitoring:","**** https://medium.com/solar-labs-team/cosmos-how-to-monitoring-your-validator-892a46298722","https://medium.com/simply-vc/cosmos-monitoring-and-alerting-for-validators-8e3f016c9567","https://chainflow.io/cosmos-validator-mission-control/","https://medium.com/cypher-core/cosmos-how-to-set-up-your-own-network-monitoring-dashboard-fe49c63a8271"]},{"l":"Simple setup using Grafana Cloud","p":["Using only the raw metrics endpoint provided by rebusd you can get a working dashboard and alerting setup using Grafana Cloud. This means you don't have to run Grafana on the instance.","First, in config.toml enable Prometheus. The default metrics port will be 26660","Download Prometheus - this is needed to ship logs to Grafana Cloud.","Create a prometheus.yml file with your Grafana Cloud credentials in the Prometheus folder. You can get these via the Grafana UI. Click 'details' on the Prometheus card:","3. Set up a service file, with sudo nano /etc/systemd/system/prometheus.service, replacing your-user and prometheus-folder with the location of Prometheus. This sets the Prometheus port to 6666","4. Enable and start the service.","5. Import a dashboard to your Grafana. Search for 'Cosmos Validator' to find several options. You should see logs arriving in the dashboard after a couple of minutes.","A simple node dashboard example","For more info:","https://grafana.com/docs/grafana-cloud/quickstart/noagent_linuxnode/","https://forum.cosmos.network/t/monitoring-alerting-for-your-validator/446/28"]},{"l":"Avoiding DDOS attacks","p":["If you are comfortable with server ops, you might want to build out a Sentry Node Architecture validator to protect against DDOS attacks.","The current best practice for running mainnet nodes is a Sentry Node Architecture. There are various approaches, as detailed here. Some validators advocate co-locating all three nodes in virtual partitions on a single box, using Docker or other virtualisation tools. However, if in doubt, just run each node on a different server.","Bear in mind that Sentries can have pruning turned on, as outlined here. It is desirable, but not essential, to have pruning disabled on the validator node itself."]},{"l":"Managing storage","p":["If you are using a cloud services provider, you may want to mount $HOME on an externally mountable storage volume, as you may need to shuffle the data onto a larger storage device later. You can specify the home directory in most commands, or just use symlinks.","Disk space is likely to fill up, so having a plan for managing storage is key.","If you are running sentry nodes:","1TB storage for the full node will give you a lot of runway","200GB each for the sentries with pruning should be sufficient","Managing backups is outside the scope of this documentation, but several validators keep public snapshots and backups."]},{"l":"Ballpark costs","p":["To give you an idea of cost, on AWS EBS (other cloud providers are available, or you can run your own hardware), with two backups a day, this runs to roughly:","$150 for 1TB","$35 for 200GB","Total cost: $220","What approach you take for this will depend on whether you are running on physical hardware co-located with you, running in a data centre, or running on virtualised hardware."]}],[{"i":"#","p":["General instructions on how to join the Rebus testnets"]},{"l":"Joining Testnets"},{"l":"Current testnets","p":["Below is the list of Rebus testnets and their current status. You will need to know the version tag for installation of the rebusd binary.","For details of upgrades on the current testnet, as well as syncing, you can check out the testnets repo, which is the definitive source of truth.","If you get stuck, then please ask on Discord.","chain-id","Current Github version tag","Description","Status","reb_3333-1","v1.0.0","Testing Rebus platform.","current"]},{"l":"Minimum Hardware Requirements","p":["The minimum recommended hardware requirements for running a validator for the Rebus testnets are:","Chain-id","Requirements","reb_3333-1","16GB RAM 200GB of disk space at least 2 cores cpu","These specifications are the minimum recommended. As Rebus Network is a smart contract platform, it can at times be very demanding on hardware. Low spec validators WILL get stuck on difficult to process blocks.","Note that the testnets accumulate data as the blockchain continues. This means that you will need to expand your storage as the blockchain database gets larger with time."]},{"l":"rebusd Installation","p":["To get up and running with the rebusd binary, please follow the instructions here"]},{"l":"Configuration of Shell Variables","p":["For this guide, we will be using shell variables. This will enable the use of the client commands verbatim. It is important to remember that shell commands are only valid for the current shell session, and if the shell session is closed, the shell variables will need to be re-defined.","If you want variables to persist for multiple sessions, then set them explicitly in your shell .profile, as you did for the Go environment variables.","To clear a variable binding, use unset $VARIABLE_NAME. Shell variables should be named with ALL CAPS."]},{"l":"Choose a testnet","p":["Choose the chain-id testnet you would like to join from here. Set the CHAIN_ID:"]},{"l":"Set your moniker name","p":["Choose your moniker-name, this can be any name of your choosing and will identify your validator in the explorer. Set the MONIKER_NAME:"]},{"l":"Set persistent peers","p":["Active and running peers will be required to tell your node where to connect to other nodes and join the network. To retrieve the peers for the Rebus testnet:","NB: If you are unsure about this, you can ask in discord for the current peers and explicitly set them in ~/.rebusd/config/config.toml instead."]},{"l":"Set minimum gas prices","p":["In $HOME/.rebusd/config/app.toml, set gas minimum prices:"]},{"l":"Setting up the Node","p":["Running a node is different from running a Validator. In order to run a Validator, you must create and sync a node, and then upgrade it to a Validator.","These instructions will direct you on how to initialise your node, synchronise to the network and upgrade your node to a validator."]},{"l":"Initialize the chain","p":["This will generate the following files in ~/.rebusd/config/","genesis.json","node_key.json","priv_validator_key.json","Note that this means if you jumped ahead and already downloaded the genesis file, this command will replace it and you will get an error when you attempt to start the chain."]},{"l":"Download the genesis file","p":["This will replace the genesis file created using rebusd init command with the genesis file for the testnet. ****"]},{"i":"set-persistent-peers-1","l":"Set persistent peers","p":["Using the peers variable we set earlier, we can set the persistent_peers in ~/.rebusd/config/config.toml:"]},{"l":"Create a local key pair","p":["Create a new key pair for your validator:","Replace key-name with a key name of your choosing.","If you already have a key from a previous testnet, you can recover it using the mnemonic:","The key is Keplr and Keplr+Ledger wallet compatible. (type=118 algo=secp256k1)","After creating a new key, the key information and seed phrase will be shown. It is essential to write this seed phrase down and keep it in a safe place. The seed phrase is the only way to restore your keys."]},{"l":"Get some testnet tokens","p":["Testnet tokens can be requested from the #faucet channel on Discord.","To request tokens type $request your-public-address in the message field and press enter."]},{"l":"Setup cosmovisor","p":["Follow these instructions to setup cosmovisor and start the node."]},{"l":"Syncing the node","p":["After starting the rebusd daemon, the chain will begin to sync to the network. The time to sync to the network will vary depending on your setup, but could take a very long time. To query the status of your node:","If this command returns true then your node is still catching up. If it returns false then your node has caught up to the network current block and you are safe to proceed to upgrade to a validator node.","Validators and sentries can rapidly join the network with state-sync. See instructions for using state-sync here."]},{"l":"Upgrade to a validator","p":["To upgrade the node to a validator, you will need to submit a create-validator transaction:"]},{"l":"Backup critical files","p":["There are certain files that you need to backup to be able to restore your validator if, for some reason, it damaged or lost in some way. Please make a secure backup of the following files located in ~/.rebusd/config/:","priv_validator_key.json","node_key.json","It is recommended that you encrypt the backup of these files."]}],[{"i":"#","p":["Details of mainnet upgrades, installation block height and links to instructions."]},{"l":"Mainnet Upgrades","p":["The Rebus Network mainnet is regularly upgraded to provide the latest security patches, Cosmos SDK module integrations and performance improvements.","Some upgrades are able to be undertaken automatically with Cosmovisor while other upgrades need to be manually installed at specified block heights. Others can be installed at any time after their predecessor."]},{"l":"Upgrade types","p":["There are two types of upgrades that happen on Rebus Network. They are:","Planned feature upgrades or planned patches","Unplanned security upgrades."]},{"i":"planned-upgrade-via-governance","l":"Planned upgrade (via governance)","p":["Planned upgrades, as the name suggests, are upgrades that are developed and proposed via governance. If approved by the community, these upgrades are undertaken by the chain automatically halting at the planned upgrade height.","Node operators are then required to swap the binary for the planned upgrade binary. After all node operators have upgraded and started their nodes the network will continue in the upgraded state."]},{"l":"Unplanned upgrade","p":["Where emergency security patches are required, node operators are notified via the official discord validator channels. Node operators will be required to halt their nodes manually at the required upgrade height, swap the patched binary and restart their nodes. After all node operators have upgraded and started their nodes the network will continue in the upgraded state."]}],[{"i":"#","p":["Rebus Branding Assets"]},{"l":"Brand Identity","p":["Assets","Logo Black PNG","Logo White PNG","Icon PNG","Color Identity","Primary Color","Secondary Color","Wallpapers","Wallpaper 1","Wallpaper 2"]}],[{"l":"Contributor Covenant Code of Conduct"},{"l":"Our Pledge","p":["We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.","We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community."]},{"l":"Our Standards","p":["Examples of behavior that contributes to a positive environment for our community include:","Demonstrating empathy and kindness toward other people","Being respectful of differing opinions, viewpoints, and experiences","Giving and gracefully accepting constructive feedback","Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience","Focusing on what is best not just for us as individuals, but for the overall community","Examples of unacceptable behavior include:","The use of sexualized language or imagery, and sexual attention or advances of any kind","Trolling, insulting or derogatory comments, and personal or political attacks","Public or private harassment","Publishing others' private information, such as a physical or email address, without their explicit permission","Other conduct which could reasonably be considered inappropriate in a professional setting"]},{"l":"Enforcement Responsibilities","p":["Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.","Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate."]},{"l":"Scope","p":["This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event."]},{"l":"Enforcement","p":["Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at webmaster@rebus.business. All complaints will be reviewed and investigated promptly and fairly.","All community leaders are obligated to respect the privacy and security of the reporter of any incident."]},{"l":"Enforcement Guidelines","p":["Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:"]},{"l":"1. Correction","p":["Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.","Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested."]},{"l":"2. Warning","p":["Community Impact: A violation through a single incident or series of actions.","Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban."]},{"l":"3. Temporary Ban","p":["Community Impact: A serious violation of community standards, including sustained inappropriate behavior.","Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban."]},{"l":"4. Permanent Ban","p":["Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.","Consequence: A permanent ban from any sort of public interaction within the community."]},{"l":"Attribution","p":["This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.","Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.","For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations."]}],[{"l":"Credits"},{"l":"Documentation Credits","p":["We've started the documentation from the Juno documetation repository as a reference of what we needed in our documetation as the two projects have some similaries.","All the icons that are not part of the Octicon icons set have been taken from ICONS8.","The documentation is deployed on Github pages using Retype."]}],[{"i":"#","p":["Rebus Branding Assets"]},{"i":"socialresourcesupdates","l":"Social/Resources/Updates","p":["Website","Updates","Blog","Docs","Github","Discord","Telegram","Twitter"]}]]