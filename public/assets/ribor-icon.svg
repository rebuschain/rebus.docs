<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 27.3.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 16 16" style="enable-background:new 0 0 16 16;" xml:space="preserve">
<style type="text/css">
	.st0{opacity:0.2;}
	.st1{fill:url(#SVGID_1_);}
	.st2{opacity:0.3;}
	.st3{fill:url(#SVGID_00000032627167369674254750000011523554854703056816_);}
	.st4{opacity:0.6;}
	.st5{fill:url(#SVGID_00000011027830369198363930000012669005657788769424_);}
	.st6{fill:url(#SVGID_00000133500147184626235130000010782783154236139419_);}
</style>
<script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //
	]]>
}
          )();</script>
<g class="st0">
	<linearGradient id="SVGID_1_" gradientUnits="userSpaceOnUse" x1="12.7721" y1="2.0086" x2="6.645" y2="12.621">
		<stop  offset="0" style="stop-color:#E95062"/>
		<stop  offset="0.11" style="stop-color:#E9506E"/>
		<stop  offset="0.32" style="stop-color:#E9508D"/>
		<stop  offset="0.48" style="stop-color:#E950AA"/>
		<stop  offset="0.58" style="stop-color:#E651AB"/>
		<stop  offset="0.66" style="stop-color:#DC53AE"/>
		<stop  offset="0.73" style="stop-color:#CC57B3"/>
		<stop  offset="0.8" style="stop-color:#B45CBA"/>
		<stop  offset="0.86" style="stop-color:#9763C3"/>
		<stop  offset="0.91" style="stop-color:#7A69CC"/>
	</linearGradient>
	<path class="st1" d="M10,1.1H3.7c-0.1,0-0.2,0.1-0.2,0.2v2.2c0,0.1,0.1,0.2,0.2,0.2H10c1.1,0,1.9,0.9,1.9,1.9
		c0,1.1-0.9,1.9-1.9,1.9H3.9c-0.2,0-0.2,0.2-0.1,0.3l7.5,7.5c0.1,0.1,0.2,0.1,0.4,0.1l3,0c0.2,0,0.2-0.2,0.1-0.3l-4.8-4.8
		c-0.1-0.1,0-0.3,0.1-0.3c2.5,0,4.5-2,4.5-4.5C14.5,3.1,12.5,1.1,10,1.1z"/>
</g>
<g class="st2">
	
		<linearGradient id="SVGID_00000106147407261490233270000008551729520449858957_" gradientUnits="userSpaceOnUse" x1="11.9814" y1="1.7628" x2="5.8548" y2="12.3743">
		<stop  offset="0" style="stop-color:#E95062"/>
		<stop  offset="0.11" style="stop-color:#E9506E"/>
		<stop  offset="0.32" style="stop-color:#E9508D"/>
		<stop  offset="0.48" style="stop-color:#E950AA"/>
		<stop  offset="0.58" style="stop-color:#E651AB"/>
		<stop  offset="0.66" style="stop-color:#DC53AE"/>
		<stop  offset="0.73" style="stop-color:#CC57B3"/>
		<stop  offset="0.8" style="stop-color:#B45CBA"/>
		<stop  offset="0.86" style="stop-color:#9763C3"/>
		<stop  offset="0.91" style="stop-color:#7A69CC"/>
	</linearGradient>
	<path style="fill:url(#SVGID_00000106147407261490233270000008551729520449858957_);" d="M9.2,0.9H2.9C2.8,0.9,2.8,0.9,2.8,1v2.2
		c0,0.1,0.1,0.2,0.2,0.2h6.3c1.1,0,1.9,0.9,1.9,1.9c0,1.1-0.9,1.9-1.9,1.9H3.1C3,7.3,2.9,7.4,3,7.6l7.5,7.5c0.1,0.1,0.2,0.1,0.4,0.1
		l3,0c0.2,0,0.2-0.2,0.1-0.3l-4.8-4.8C9,10,9.1,9.8,9.2,9.8c2.5,0,4.5-2,4.5-4.5C13.7,2.9,11.7,0.9,9.2,0.9z"/>
</g>
<g class="st4">
	
		<linearGradient id="SVGID_00000132807444257381981480000011267036437709844919_" gradientUnits="userSpaceOnUse" x1="11.2064" y1="1.486" x2="5.0798" y2="12.0975">
		<stop  offset="0" style="stop-color:#E95062"/>
		<stop  offset="0.11" style="stop-color:#E9506E"/>
		<stop  offset="0.32" style="stop-color:#E9508D"/>
		<stop  offset="0.48" style="stop-color:#E950AA"/>
		<stop  offset="0.58" style="stop-color:#E651AB"/>
		<stop  offset="0.66" style="stop-color:#DC53AE"/>
		<stop  offset="0.73" style="stop-color:#CC57B3"/>
		<stop  offset="0.8" style="stop-color:#B45CBA"/>
		<stop  offset="0.86" style="stop-color:#9763C3"/>
		<stop  offset="0.91" style="stop-color:#7A69CC"/>
	</linearGradient>
	<path style="fill:url(#SVGID_00000132807444257381981480000011267036437709844919_);" d="M8.4,0.6H2.2C2.1,0.6,2,0.7,2,0.8V3
		C2,3,2.1,3.1,2.2,3.1h6.3c1.1,0,1.9,0.9,1.9,1.9C10.4,6.1,9.5,7,8.4,7H2.3C2.2,7,2.1,7.2,2.2,7.3l7.5,7.5c0.1,0.1,0.2,0.1,0.4,0.1
		l3,0c0.2,0,0.2-0.2,0.1-0.3L8.3,9.8c-0.1-0.1,0-0.3,0.1-0.3c2.5,0,4.5-2,4.5-4.5C12.9,2.6,10.9,0.6,8.4,0.6z"/>
</g>
<g>
	
		<linearGradient id="SVGID_00000036240791017384923710000010833613747552073099_" gradientUnits="userSpaceOnUse" x1="10.4194" y1="1.2336" x2="4.2924" y2="11.846">
		<stop  offset="0" style="stop-color:#E95062"/>
		<stop  offset="0.11" style="stop-color:#E9506E"/>
		<stop  offset="0.32" style="stop-color:#E9508D"/>
		<stop  offset="0.48" style="stop-color:#E950AA"/>
		<stop  offset="0.58" style="stop-color:#E651AB"/>
		<stop  offset="0.66" style="stop-color:#DC53AE"/>
		<stop  offset="0.73" style="stop-color:#CC57B3"/>
		<stop  offset="0.8" style="stop-color:#B45CBA"/>
		<stop  offset="0.86" style="stop-color:#9763C3"/>
		<stop  offset="0.91" style="stop-color:#7A69CC"/>
	</linearGradient>
	<path style="fill:url(#SVGID_00000036240791017384923710000010833613747552073099_);" d="M7.7,0.3H1.4c-0.1,0-0.2,0.1-0.2,0.2v2.2
		c0,0.1,0.1,0.2,0.2,0.2h6.3c1.1,0,1.9,0.9,1.9,1.9c0,1.1-0.9,1.9-1.9,1.9H1.5C1.4,6.7,1.3,6.9,1.4,7l7.5,7.5
		c0.1,0.1,0.2,0.1,0.4,0.1l3,0c0.2,0,0.2-0.2,0.1-0.3L7.5,9.5c-0.1-0.1,0-0.3,0.1-0.3c2.5,0,4.5-2,4.5-4.5
		C12.1,2.3,10.1,0.3,7.7,0.3z"/>
</g>
</svg>
